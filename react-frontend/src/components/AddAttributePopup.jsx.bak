import React, { Component } from 'react'



class AddAttributePopup extends Component {
	
	
    constructor(props) {
        super(props)
		
		let pGt;
		let pGtVal;
		let pLt;
		let pLtVal;
		let pEq;
		let pEqVal;
		for (let i = 0; i < this.props.currentRestrictions.length; i++) {
			if ((this.props.currentRestrictions[i])["field"] == this.props.field) {
				pGt = (this.props.currentRestrictions[i])["gt"];
				pGtVal = (this.props.currentRestrictions[i])["gtVal"];
				pLt = (this.props.currentRestrictions[i])["lt"];
				pLtVal = (this.props.currentRestrictions[i])["ltVal"];
				pEq = (this.props.currentRestrictions[i])["eq"];
				pEqVal = (this.props.currentRestrictions[i])["eqVal"];
				
				break;
			}
		}

        this.state = {
              field: "",
			  gt: pGt,
			  gtVal: pGtVal,
			  lt: pLt,
			  ltVal: pLtVal,
			  eq: pEq,
			  eqVal: pEqVal,
			  dataString: "",
			  callbackFunction: "",
			  currentRestrictions: []
        }
		
		this.addNewRestriction = this.addNewRestriction.bind(this);
		this.subRestriction = this.subRestriction.bind(this);
		this.dataStringRelationLoad = this.dataStringRelationLoad.bind(this);
    }
	
	sendData(newRestriction) {
         this.props.parentCallback(newRestriction);
    }
	

	addRestriction = (cond) => (
		<div className="restrictionEditRow">
			<button id="subRestriction" name={cond} onClick={() => this.subRestriction(cond) }><b>-</b></button> &nbsp;
			<a> {this.props.field} </a> &nbsp;
				{this.dataStringRelationLoad()} &nbsp;
			<input type="text" size="1" id="relationVal"></input> &nbsp;
			<button className="btn-primary" onClick={() => this.filterData(cond) }>Save</button>
		</div>
	)
	
	filterData(cond) {
		var relationDrop = document.getElementById("relation");
		var relation;
		if (relationDrop.nodeName == "SELECT") {
			relation = relationDrop.options[relationDrop.selectedIndex].value;
		} else {
			relation = "eq";
		}
			
		
		var relationVal = document.getElementById("relationVal").value;
		let newArray = [...this.props.currentRestrictions];
		
		
		for (let i = 0; i < newArray.length; i++) {
			if ((newArray[i])["field"] == this.props.field) {
				(newArray[i])[relation] = true;
				(newArray[i])[relation+"Val"] = relationVal;
			}
		}
		
		this.subRestriction(cond);
		this.sendData(newArray);
		
		
		
		var relationChar = '';
		if (relation == "gt") {
			relationChar = '>';
		}
		if (relation == "lt") {
			relationChar = '<';
		}
		if (relation == "eq") {
			relationChar = '=';
		}
		
		var tagText = (this.props.field+" "+relationChar+" "+relationVal);
		
		var element = document.getElementById(relation+"Tag");
		element.innerHTML = tagText;
		element.style.visibility = "visible";
	}
	
	
	dataStringRelationLoad() {
		if (!this.props.dataString) {
			return (
			<select name="relation" id="relation">
				<option value="gt">></option>
				<option value="lt">&lt;</option>
				<option value="eq">=</option>
			</select>);
		} else {
			return (
			<a id="relation"> = </a>
			);
		}
	}
	
	
	buildRestrictionsList = () => {
		let array = [];
		
		if (this.state.gt == "true") {
			array.push(this.addRestriction("gt"));
		}
		if (this.state.lt == "true") {
			array.push(this.addRestriction("lt"));
		}
		if (this.state.eq == "true") {
			array.push(this.addRestriction("eq"));
		}
		
		return array;
	}
	
	subRestriction(cond) {
		this.setState({[cond]: "false"});
		var addButton = document.getElementById("addRestriction");
		addButton.style.visibility = "visible";
	}
	
	addNewRestriction() {
		var addButton = document.getElementById("addRestriction");
		addButton.style.visibility = "hidden";
		
		if (!(this.state.gt == "true") && !(this.props.dataString)) {
			this.setState( {gt: "true"});
			this.forceUpdate();
			return;
		}
		if (!(this.state.lt == "true") && !(this.props.dataString)) {
			this.setState({lt: "true"});
			this.forceUpdate()
			return;
		}
		if (!(this.state.eq == "true")) {
			this.setState({eq: "true"});
			this.forceUpdate()
			return;
		}
	}
	
	deselectAll = () => {
		this.subRestriction("gt");
		this.subRestriction("lt");
		this.subRestriction("eq");
		
		var element = document.getElementById("gtTag");
		element.style.visibility = "hidden";
		element = document.getElementById("ltTag");
		element.style.visibility = "hidden";
		element = document.getElementById("eqTag");
		element.style.visibility = "hidden";
		
		let newArray = [...this.props.currentRestrictions];
		
		
		for (let i = 0; i < newArray.length; i++) {
			if ((newArray[i])["field"] == this.props.field) {
				(newArray[i])["gt"] = false;
				(newArray[i])["lt"] = false;
				(newArray[i])["eq"] = false;
			}
		}
		
		this.sendData(newArray);
	}
	


    render() {
        return (
		<div id="editAttributePopupMenu">
			<div id="editHeader">
				<a>{this.props.field}</a> &nbsp;
				<i>{this.props.dataString ? "(string)" : "(number)"}</i>
			</div>
			<br/>
			<div id="currentRestrictionsContainer">
				<div>
					<button id="addRestriction" onClick={this.addNewRestriction}>+</button>
					{this.buildRestrictionsList()} 
					<ul id="restrictionList">
					<li id="gtTag"/>
					<li id="ltTag"/>
					<li id="eqTag"/>
					</ul>
				</div>
				<br/>
				<button className="btn-reset" onClick={this.deselectAll}>Reset</button> &nbsp;
			</div>
		</div>
        )
    }
}

export default AddAttributePopup
